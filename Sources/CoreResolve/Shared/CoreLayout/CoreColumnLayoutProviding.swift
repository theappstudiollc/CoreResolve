//
//  CoreColumnLayoutProviding.swift
//  CoreResolve
//
//  Created by David Mitchell
//  Copyright Â© 2019 The App Studio LLC.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//	   http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

#if !os(watchOS)

#if os(iOS) || os(tvOS)
import UIKit
#elseif os(macOS)
import AppKit
#endif

/// Provides column AutoLayout capability via Layout Guides
public protocol CoreColumnLayoutProviding: CoreHorizontalLayoutAnchorable {
	
	/// The currently configured number of columns
	var numberOfColumns: Int { get }
	
	/// Returns the `CoreHorizontalLayoutAnchorable` instance for the specified column index
	///
	/// - Parameter column: The desired column index
	/// - Returns: The Layout Provider for the requested column
	func layoutProvider(for column: Int) -> CoreHorizontalLayoutAnchorable
}

// MARK: - Convenience methods for `CoreColumnLayoutProviding` instances
public extension CoreColumnLayoutProviding {
	
	/// Constraints the receiver's column to another `CoreColumnLayoutProviding` instance's column
	///
	/// - Parameters:
	///   - column: The column
	///   - columnLayoutProviding: The other column layout provider to constrain to
	///   - priority: The layout priority of the constraints
	/// - Returns: A collection of constraints generated by the method, which have not yet been activated
	func constrainColumn(_ column: Int, to columnLayoutProviding: CoreColumnLayoutProviding, with priority: LayoutPriority = .required) -> HorizontalBoundingConstraints {
		let guide = layoutProvider(for: column)
		let otherGuide = layoutProvider(for: column)
		return guide.constrainHorizontally(to: otherGuide, with: priority)
	}
}
/* TODO: Consider creating a UIStackView subclass (or completely via extension that will let UIStackView implement CoreColumnLayoutProviding)
// MARK: - Marks UIStackView as `CoreColumnLayoutProviding`
extension UIStackView: CoreColumnLayoutProviding { }
*/
#endif
